# IBM Ponder This challenge main and bonus *, Dec 20
# https://research.ibm.com/haifa/ponderthis/challenges/December2020.html
# Sanandan Swaminathan, submitted Dec 6, 2020

One solution I found for the December 2020 IBM Ponder This challenge is...

[101, 101, 115, 115, 135]
[50, 50, 115, 57, 135]

where [101, 101, 115, 115, 135] is the population vector, and [50, 50, 115, 57, 135] is the vote vector for the losing candidate (a 
maximal losing vote with respect to the specific population vector, as defined in the puzzle). The size of this maximal losing vote is 
407. No vote vector of a larger size (with respect to the specific population vector) is a losing one. Of course, there are votes of 
smaller size with respect to the specific population vector that are winning votes, for example [51,51,58,0,0]. One assumption here is 
that all eligible voters in the 5 states actually voted. That would be astounding in real life. In some US states, it's not even enough 
if a voter is eligible; he/she must be registered too.

In a maximal losing vote scenario, we observe the following:
In a state the loser has won, she must have won 100% of that state's votes. If she had won any less, then a single lost vote flipping to 
her in that state wouldn't change her to a winner in the overall election.
In a state the loser lost, she must have received exactly one vote less than the state's winner. If she was trailing by more, the flip of 
a single vote in that state wouldn't change her to a winner in the overall election.
Given the range of population numbers in each of the 5 states (odd numbers from 101 to 149), it's clear that the loser couldn't have won 
less than 2 states in the maximal losing vote scenario. It can also be seen that, given the range of populations, if a candidate won 3 or 
more states, she would have won the election. In the worst case, a candidate would win 3 states with each having a population of 101, and 
would lose 2 states with each having a population of 149. Even in this worst case, that candidate would get more than half the electors. 
Thus, in a maximal losing vote scenario, the losing candidate would have won 2 states (winning 100% of their votes as per point #1 
above), and a single vote flipping to her in any lost state would give her a third state (given that she was behind by only 1 vote in 
that lost state as per point #2 above). Winning a third state (any lost state) would make her the winner of the overall election.
When we find a vote vector that satisfies the above conditions, and meets the percentage target given in the puzzle, we need to check if 
there could be some other combination of two states won with 100% votes, and 3 states lost by 1 vote, which would cause the total number 
of votes won by the loser in that scenario to exceed the determined vote vector size. This would mean that there's a bigger vote vector 
size that still leads to a loss in the overall election, and the determined vote vector wouldn't be a valid maximal losing vote.
Given point #3 above, I decided to bypass the whole elector distribution calculation. I wrote a short C program that completed 
instantaneously. It does the following: Loop through combinations (not permutations) of 5 population numbers (five odd numbers from 101 
to 149 with repetitions allowed, but distinct combinations of 5 numbers). For each combination, it loops through the ten combinations of 
states where the loser has won exactly 2 states. For each such combination, it computes the total number of votes the loser won across 
the 5 states. If the state was won by the loser, it gives her all of the state's votes. If the state was lost by the loser, it gives her 
one vote less than the state's winner. The program then calculates the loser's vote total (across 5 states) as a percentage of the
total voting population across the 5 states, and compares this to the target percentage 71.781305%. If the target percentage is met, the 
program checks if there is any other combination of two states won with 100% votes, and 3 states lost by 1 vote, where the total number 
of votes that would be won by the loser with this combination of states would exceed the determined vote size. If the vote vector passes 
this check, a maximal losing vote has been found, and the program exits.

The first match found was...
pop = [101,101,115,115,135]
v = [50,50,115,57,135]

I decided to go ahead with answering the bonus question with the publicly available data for eligible voters for each US state (plus 
Washington DC). The maximal losing vote I get is 77.776586% with respect to the given eligible voter population and elector counts for 
the 2020 election. I used the eligible voter data set from http://www.electproject.org/2020g . Of course, the answer for the maximal 
losing vote percent would vary based on the data source used. For electors per state, I used the actual counts of the 2020 election 
(totaling 538 electors) which are determined in the US by a non-simplified formula (that uses the Huntington/Hall method to handle 
fractional allocations). Please see the attached Microsoft Excel spreadsheet for the data I used and my calculation for maximal losing 
vote.

I computed "popular votes per elector" for every state. I took the top states in terms of the popular votes per elector ratio, keeping 
the electoral count total less than 269 electors. The top 12 states constitute 264 electors. So, I added Idaho to make it 268. However, 
the combination of Virginia and Idaho can be replaced by Missouri and Oregon to get even more popular votes while keeping the electoral 
count at 268. The losing candidate wins the 13 states (268 electors) with 100% of the eligible votes, and loses all the rest by falling 
just short of over half. For this last point, I just gave the losing candidate half the votes. The eligible voter numbers are anyway 
estimates, and relatively large numbers, some of them even numbers, so awarding half the votes in lost states would have a negligible 
impact on the maximal losing vote percent.

