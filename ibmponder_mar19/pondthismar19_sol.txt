# IBM Ponder This challenge March 19
# https://research.ibm.com/haifa/ponderthis/challenges/March2019.html
# Sanandan Swaminathan, submitted March 20, 2019

One solution that works:
n1 = 73069 and n2 = 292276

BAT(sqrt(73069),N1) = BAT(sqrt(292276),N1) = 4869738807127314917, a prime.

BAT(sqrt(73069),N2) = BAT(sqrt(292276),N2) = 6033572659, a prime.

(Given N1 = 6.2415 x 10^18, and N2 = 17.6 x 10^9)

Both these non-square integers satisfy b1=BAT(sqrt(n1),N1)=BAT(sqrt(n2),N1) and b2=BAT(sqrt(n1),N2)=BAT(sqrt(n2),N2) and both b1 and b2 are prime numbers. I took N1 as 6.2415 x 10^18 electrons per coulomb, and N2 as 17.6 x 10^9 electron volts.

The BAT function I wrote is based on the fact that the square root of a non-square positive integer (an irrational number) can be written as a repeated continued fraction that continues forever, with successive numerators as 1 (numerator after the initial nearest-integer square-root). Also, the pattern repeats after some point. When an irrational number is written in such a form, the truncated convergents provide the best rational approximation with denominator less than a given limit. 
But convergents of the continued fraction of irrational square root give the best approximation upto that denominator, but there may be fractions closer to the square root (but not necessarily) with denominator between the final good convergent's denominator and the given denominator limit (N1 or N2).
The last convergent that keeps the denominator below the given limit gives the best approximation upto that point. I consider the next term of the continued fraction that tips the denominator over the limit. I assume that term to be lower numbers from 1 to the number below that next term. For each of these tries, I check if the resulting fraction has a denominator less than the limit, and whether the resulting fraction is closer to the square root than the best approximation found so far.
My BAT function takes the following arguments: the number whose square root we seek to approximate, the denominator limit (N1 or N2, for example), and a "check if prime number" flag. The BAT function determines the square root's continued fraction's repeating pattern, and then calculates denominator for the successive approximations using a recursive formula. This continues until the successive denominators stay less than the given denominator limit. In the case of N1 and N2 limits, the function then checks if the final denominator is a prime number.

I called the BAT function in a loop for non-square numbers starting from 2, with N2 as denominator limit. If the final denominator is found to be prime, I check if the same number gets a prime final denominator with N1 as denominator limit. If this check also passes, If N1 and N2 checks pass, I output the number and the corresponding final denominators to a file. I could have used a hash table to find a match subsequently. What I did was that I continued writing to the file for subsequent non-square numbers that met the puzzle's conditions. Later, I sorted the output file outside the program.

